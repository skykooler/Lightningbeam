name: 'publish'

on:
  workflow_dispatch:
  push:
    branches:
      - release

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest' # for Intel based macs.
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Set version for Windows build
        run: |
          # Get the version from the Git tag (e.g., v0.6.3-alpha)
          VERSION=$(echo ${GITHUB_REF#refs/tags/})
    
          # Replace '-alpha' with '-0' and '-beta' with '-1' only for Windows version
          if [[ $VERSION == *"-alpha"* ]]; then
            WINDOWS_VERSION=${VERSION%-alpha}-0
          elif [[ $VERSION == *"-beta"* ]]; then
            WINDOWS_VERSION=${VERSION%-beta}-1
          else
            WINDOWS_VERSION=$VERSION  # Keep the same version for non-alpha/beta tags
          fi

          # Copy tauri.conf.json to tauri.windows.conf.json and substitute version number for Windows
          cp src-tauri/tauri.conf.json src-tauri/tauri.windows.conf.json

          sed -i "s/\"version\": \".*\"/\"version\": \"${WINDOWS_VERSION}\"/" src-tauri/tauri.windows.conf.json
        shell: bash

       

      - name: setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.1.2
      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'pnpm' # Set this to npm, yarn or pnpm.

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable # Set this to dtolnay/rust-toolchain@nightly
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: install frontend dependencies
        # If you don't have `beforeBuildCommand` configured you may want to build your frontend here too.
        run: pnpm install # change this to npm or pnpm depending on which one you use.

      - name: Create Release with Tauri Action
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: "app-v${VERSION}"  # Use the original version tag for the release
          releaseName: "App v${VERSION}"
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: false  # Set to true if you want the release to be a draft
          prerelease: true
